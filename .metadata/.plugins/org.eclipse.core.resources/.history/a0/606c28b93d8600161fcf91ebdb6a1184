/* 433-294 Object Oriented Software Development
 * RPG Game Engine
 * Author: <Your name> <Your login>
 */

import org.newdawn.slick.Color;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.tiled.TiledMap;

/** Represents the entire game world.
 * (Designed to be instantiated just once for the whole game).
 */
public class World
{
    /** Create a new World object. */
	TiledMap TiledMap;
	
	private Player player1;
	private Camera move;
	private Image Player;
	private final int halfw=RPG.screenwidth/2,halfh=RPG.screenheight/2;
	private int xPos,yPos;
	static final int tile=72; 
	private Image panel;
	
    public World()
    throws SlickException
    {
    	TiledMap=new TiledMap("assets/map.tmx","assets");
    	player1=new Player(Player);
    	move=new Camera(player1,RPG.screenwidth,RPG.screenheight);
    	xPos=move.getxPos();
    	yPos=move.getyPos();
    	panel=new Image("assets/panel.png");
      
    }

    /** Update the game state for a frame.
     * @param dir_x The player's movement in the x axis (-1, 0 or 1).
     * @param dir_y The player's movement in the y axis (-1, 0 or 1).
     * @param delta Time passed since last frame (milliseconds).
     */
    public void update(double dir_x, double dir_y, int delta)
    throws SlickException
    {
    	
    	/*xpos and ypos are the coordinate of map, but in the
    	 *left-top corner of screen,plposx and plposy for match
    	 *the coordinate of the position where player standing.
    	 *cause player will drawcenterd, feeler for match the 
    	 *feet of the player standing, making it looks more natural
    	*/
    	final int feeler=18;
    	int plposx=xPos+halfw; 
    	int plposy=yPos+halfh+feeler; 
    	
    	int i;
    	int check;
    	
    	/*the feelers in direct arrays are using for check block tiles
    	 *around the player,direct1 for left,right, direct2 for up,down */
    	int[] direct1={plposx,plposx,plposx-feeler,plposx+feeler};
    	int[] direct2={plposy+feeler,plposy-feeler,plposy,plposy};
    	
    	/*chckTiles[]: up:0, down:1, left:2, right:3*/
    	int checkTiles[]=new int[4];
    		
    	for (i=0;i<4;i++){
    		if (direct1[i]-halfw+feeler<=move.getMaxX()&&
    				direct2[i]-halfh+feeler<=move.getMaxY()){
	    		check=TiledMap.getTileId(direct1[i]/tile,direct2[i]/tile,0);
	    		checkTiles[i]=Integer.parseInt(TiledMap.getTileProperty(check,
	    				"block", "0"));
	    	}
    	}
    	
    	/*the if statements restrict player walk out the edges of
    	 *map and walk to the block tiles*/	
    	xPos+=dir_x*delta;
       	if(xPos>move.getMaxX()-tile/2||xPos<move.getMinX()||
       			(checkTiles[2]==1&&dir_x==-1)||(checkTiles[3]==1&&dir_x==1)){
       		xPos-=dir_x*delta;
       		
       	}
   	
   		yPos+=dir_y*delta;
   		if(yPos>move.getMaxY()-tile/2||yPos<move.getMinY()||
   				(checkTiles[0]==1&&dir_y==1)||(checkTiles[1]==1&&dir_y==-1)){
       		yPos-=dir_y*delta;
   		}
   		
   		/*save the coordinate for player1 in world map*/
   		player1.setyPos(yPos);
   		player1.setxPos(xPos);
    }


    /** Render the entire screen, so it reflects the current game state.
     * @param g The Slick graphics object, used for drawing.
     */
    public void render(Graphics g)
    throws SlickException
    {

    	TiledMap.render(-player1.getxPos()%tile,-player1.getyPos()%tile,
    			player1.getxPos()/tile,player1.getyPos()/tile,13,10);
    	
    	/*player always display in the center of the screen*/
    	player1.player.drawCentered(halfw,halfh);
    	renderPanel(g);
    	
    }
    
    /** Renders the player's status panel.
     * @param g The current Slick graphics context.
     */
    public void renderPanel(Graphics g)
    {
        // Panel colours
        Color LABEL = new Color(0.9f, 0.9f, 0.4f);          // Gold
        Color VALUE = new Color(1.0f, 1.0f, 1.0f);          // White
        Color BAR_BG = new Color(0.0f, 0.0f, 0.0f, 0.8f);   // Black, transp
        Color BAR = new Color(0.8f, 0.0f, 0.0f, 0.8f);      // Red, transp

        // Variables for layout
        String text;                // Text to display
        int text_x, text_y;         // Coordinates to draw text
        int bar_x, bar_y;           // Coordinates to draw rectangles
        int bar_width, bar_height;  // Size of rectangle to draw
        int hp_bar_width;           // Size of red (HP) rectangle
        int inv_x, inv_y;           // Coordinates to draw inventory item

        float health_percent;       // Player's health, as a percentage

        // Panel background image
        panel.draw(0, RPG.screenheight - RPG.panelheight);

        // Display the player's health
        text_x = 15;
        text_y = RPG.screenheight - RPG.panelheight + 25;
        g.setColor(LABEL);
        g.drawString("Health:", text_x, text_y);
        text = "??/??";                                 // TODO: HP / Max-HP

        bar_x = 90;
        bar_y = RPG.screenheight - RPG.panelheight + 20;
        bar_width = 90;
        bar_height = 30;
        health_percent = 0.75f;                         // TODO: HP / Max-HP
        hp_bar_width = (int) (bar_width * health_percent);
        text_x = bar_x + (bar_width - g.getFont().getWidth(text)) / 2;
        g.setColor(BAR_BG);
        g.fillRect(bar_x, bar_y, bar_width, bar_height);
        g.setColor(BAR);
        g.fillRect(bar_x, bar_y, hp_bar_width, bar_height);
        g.setColor(VALUE);
        g.drawString(text, text_x, text_y);

        // Display the player's damage and cooldown
        text_x = 200;
        g.setColor(LABEL);
        g.drawString("Damage:", text_x, text_y);
        text_x += 80;
        text = "??";                                    // TODO: Damage
        g.setColor(VALUE);
        g.drawString(text, text_x, text_y);
        text_x += 40;
        g.setColor(LABEL);
        g.drawString("Rate:", text_x, text_y);
        text_x += 55;
        text = "??";                                    // TODO: Cooldown
        g.setColor(VALUE);
        g.drawString(text, text_x, text_y);

        // Display the player's inventory
        g.setColor(LABEL);
        g.drawString("Items:", 420, text_y);
        bar_x = 490;
        bar_y = RPG.screenheight - RPG.panelheight + 10;
        bar_width = 288;
        bar_height = bar_height + 20;
        g.setColor(BAR_BG);
        g.fillRect(bar_x, bar_y, bar_width, bar_height);

        inv_x = 490;
        inv_y = RPG.screenheight - RPG.panelheight
            + ((RPG.panelheight - 72) / 2);
        // for (each item in the player's inventory)                // TODO
        {
            // Render the item to (inv_x, inv_y)
            inv_x += 72;
        }
    }


}
